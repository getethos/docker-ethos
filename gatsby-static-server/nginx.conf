load_module modules/ngx_http_brotli_static_module.so;
load_module modules/ngx_http_brotli_filter_module.so;

worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  # Use this map to normalize the scheme (http vs. https).
  # If the X-Forwarded-Proto is present (such as in prod/staging infra behind a load balancer),
  # use the forwarded protcol with redirects. Because we're behind a load balancer in production/staging,
  # the "$scheme" is technically HTTP behind the load balancer. So when issuing redirects that use $scheme
  # it results in the wrong protocol. This will use the X-Forwarded-Proto if it exists, otherwise
  # default to whatever the request is.
  map $http_x_forwarded_proto $normalized_proto {
    default $scheme;
    https https;
  }

  include /etc/nginx/mime.types;
  types {
    application/x-yaml yaml yml;
  }

  log_format main '$http_x_forwarded_for - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent "$http_referer" '
  '"$http_user_agent"' ;
  access_log /var/log/nginx/access.log main;

  # From "Optimizing Performance for Serving Content" from the Nginx docs
  # https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#optimizing-performance-for-serving-content
  sendfile   on;
  tcp_nopush on;
  tcp_nodelay       on;
  keepalive_timeout 65;

  # Cache open file descriptors
  open_file_cache max=10000 inactive=3600s;
  open_file_cache_valid 7200s;
  open_file_cache_min_uses 2;

  brotli              on;

  gzip                on;
  gzip_vary           on;
  gzip_proxied        any;
  gzip_types          application/javascript application/x-javascript application/rss+xml text/javascript text/css image/svg+xml;
  gzip_buffers        16 8k;
  gzip_comp_level     6;

  include /etc/nginx/conf.d/default.conf;
}
